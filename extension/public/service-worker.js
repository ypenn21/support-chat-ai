// Bundled Service Worker (no imports)
// This file should be generated by build, but we'll create it manually for now

console.log('[Background] Background service worker starting...');

// Basic message handler
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('[Background] Received message:', message.type);
  
  if (message.type === 'GET_SUGGESTION') {
    handleGetSuggestion(message.payload)
      .then(sendResponse)
      .catch(error => {
        console.error('[Background] Error:', error);
        sendResponse({ error: 'Failed to get suggestion' });
      });
    return true; // Required for async response
  }
  
  sendResponse({ error: 'Unknown message type' });
  return false;
});

async function handleGetSuggestion(payload) {
  console.log('[Background] Handling GET_SUGGESTION');
  
  // Generate mock suggestion
  const suggestion = await generateMockSuggestion(payload);
  
  console.log('[Background] Returning suggestion:', suggestion);
  return suggestion;
}

async function generateMockSuggestion(request) {
  // Simulate API delay
  const delay = Math.floor(Math.random() * 1000) + 500; // 500-1500ms
  await new Promise(resolve => setTimeout(resolve, delay));
  
  // Get last agent message (what we're responding to as the customer)
  const lastAgentMessage = request.conversation_context
    ?.slice()
    .reverse()
    .find(msg => msg.role === 'agent');

  const content = lastAgentMessage?.content?.toLowerCase() || '';

  // Generate customer response based on what the agent asked
  let response = '';

  if (content.includes('order number') || content.includes('order details') || content.includes('provide')) {
    response = "Sure! My order number is #ORDER-12345. I placed it on December 20th and haven't received any updates since.";
  } else if (content.includes('tracking') || content.includes('shipping status')) {
    response = "Yes, I'd like to know where my package is. The tracking number is TRACK-789456. It's been showing 'in transit' for over a week now.";
  } else if (content.includes('refund') || content.includes('return')) {
    response = "Yes, I'd like to return this item. It's not what I expected. Can you help me start the return process?";
  } else if (content.includes('account') || content.includes('email') || content.includes('verify')) {
    response = "Sure, my account email is customer@example.com. I registered about 6 months ago.";
  } else if (content.includes('help') || content.includes('assist') || content.includes('concern')) {
    response = "Thank you! I placed an order but haven't received it yet. Can you check on the status for me?";
  } else if (content.includes('password') || content.includes('login')) {
    response = "I forgot my password and can't access my account. My username is customer123. Can you help me reset it?";
  } else if (content.includes('processing') || content.includes('looking into') || content.includes('checking')) {
    response = "Thank you for looking into this. I really appreciate your help. Please let me know what you find.";
  } else {
    response = "Thanks for your response. I appreciate your help with this issue. What information do you need from me?";
  }
  
  return {
    suggestions: [{
      id: `suggestion-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      content: response,
      confidence: Math.random() * 0.25 + 0.7, // 0.7-0.95
      reasoning: 'Generated customer response based on support agent message'
    }],
    metadata: {
      model_used: 'gemini-1.5-pro-mock',
      latency: delay / 1000,
      token_count: response.split(' ').length * 1.3
    }
  };
}

chrome.runtime.onInstalled.addListener(() => {
  console.log('[Background] Extension installed');
});

console.log('[Background] Background service worker initialized');
