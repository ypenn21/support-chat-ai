// Bundled Service Worker (no imports)
// This file should be generated by build, but we'll create it manually for now

console.log('[Background] Background service worker starting...');

// Basic message handler
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('[Background] Received message:', message.type);
  
  if (message.type === 'GET_SUGGESTION') {
    handleGetSuggestion(message.payload)
      .then(sendResponse)
      .catch(error => {
        console.error('[Background] Error:', error);
        sendResponse({ error: 'Failed to get suggestion' });
      });
    return true; // Required for async response
  }
  
  sendResponse({ error: 'Unknown message type' });
  return false;
});

async function handleGetSuggestion(payload) {
  console.log('[Background] Handling GET_SUGGESTION');
  
  // Generate mock suggestion
  const suggestion = await generateMockSuggestion(payload);
  
  console.log('[Background] Returning suggestion:', suggestion);
  return suggestion;
}

async function generateMockSuggestion(request) {
  // Simulate API delay
  const delay = Math.floor(Math.random() * 1000) + 500; // 500-1500ms
  await new Promise(resolve => setTimeout(resolve, delay));
  
  // Get last customer message
  const lastMessage = request.conversation_context
    ?.slice()
    .reverse()
    .find(msg => msg.role === 'customer');
  
  const content = lastMessage?.content?.toLowerCase() || '';
  
  // Generate contextual response
  let response = '';
  
  if (content.includes('shipping') || content.includes('delivery')) {
    response = "I understand you're inquiring about shipping. I'd be happy to help you track your order. Could you please provide your order number so I can look up the shipping status?";
  } else if (content.includes('refund') || content.includes('return')) {
    response = "I apologize for any inconvenience. I'd be glad to help you with your refund request. To process this, I'll need your order number and the reason for the return.";
  } else if (content.includes('order')) {
    response = "I can help you check on your order status. Please provide your order number, and I'll look up the current status for you right away.";
  } else {
    response = "Thank you for reaching out. I understand your concern and I'm here to help. Could you provide a bit more detail so I can assist you better?";
  }
  
  return {
    suggestions: [{
      id: `suggestion-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      content: response,
      confidence: Math.random() * 0.25 + 0.7, // 0.7-0.95
      reasoning: 'Generated based on customer message keywords'
    }],
    metadata: {
      model_used: 'gemini-1.5-pro-mock',
      latency: delay / 1000,
      token_count: response.split(' ').length * 1.3
    }
  };
}

chrome.runtime.onInstalled.addListener(() => {
  console.log('[Background] Extension installed');
});

console.log('[Background] Background service worker initialized');
